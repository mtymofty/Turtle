import { ErrorType, WarningType } from "./ErrorType";

export class ErrorUtils {
    static error_mess: Record<ErrorType, string> = {
        [ErrorType.STRING_EOL_ERR]: `ERROR - UNEXPECTED EOL WHILE PARSING STRING`,
        [ErrorType.STRING_EOF_ERR]: `ERROR - UNEXPECTED EOF WHILE PARSING STRING`,
        [ErrorType.STRING_LEN_ERR]: "ERROR - EXCEEDING LENGTH OF A STRING!",
        [ErrorType.IDENT_LEN_ERR]: "ERROR - EXCEEDING LENGTH OF AN IDENTIFIER!",
        [ErrorType.NUM_PREC_ZERO_ERR]: "ERROR - PRECEDING ZERO IN A NUMERIC CONSTANT!",
        [ErrorType.DOUBLE_EXC_VAL_ERR]: "ERROR - EXCEEDING VALUE OF A NUMERIC CONSTANT (DOUBLE)!",
        [ErrorType.INTEGER_EXC_VAL_ERR]: "ERROR - EXCEEDING VALUE OF A NUMERIC CONSTANT (INT)!",
        [ErrorType.OPERATOR_PARSE_ERR]: `ERROR WHILE PARSING "$" OPERATOR\nEXPECTED "$" GOT "$"`,
        [ErrorType.UNREC_TOKEN_ERR]: `ERROR - UNRECOGNIZED TOKEN: "$"`,
        [ErrorType.NEWLINE_ERR]: `CRITICAL ERROR - ENCOUNTERED TWO DIFFERENT NEWLINE SIGNS - CORRUPTED FILE`,
        [ErrorType.PATH_ERR]: `CRITICAL ERROR - NO SUCH FILE OR DIRECTORY`,

        [ErrorType.INVALID_TOKEN_ERR]: `CRITICAL ERROR - EXPECTED FUNCTION DEFINITION, GOT $`,
        [ErrorType.PARAMS_LEFT_BRACE_ERR]: `ERROR - EXPECTED LEFT BRACE OF FUNCTION PARAMETERS LIST "("`,
        [ErrorType.PARAMS_RIGHT_BRACE_ERR]: `ERROR - EXPECTED RIGHT BRACE OF FUNCTION PARAMETERS LIST ")"`,
        [ErrorType.FUN_BLOCK_ERR]: `CRITICAL ERROR - EXPECTED FUNCTION BLOCK`,
        [ErrorType.FUN_IDENTIFIER_ERR]: `CRITICAL ERROR - EXPECTED FUNCTION IDENTIFIER`,
        [ErrorType.PARAMS_COMMA_ERR]: `ERROR - EXPECTED FUNCTION PARAMETER NAME`,
        [ErrorType.PARAM_NAME_ERR]: `ERROR - DUPLICATE FUNCTION PARAMETER NAME "$"`,
        [ErrorType.FUN_NAME_ERR]: `ERROR - DUPLICATE FUNCTION NAME "$"`,
        [ErrorType.BLOCK_END_ERR]: `ERROR - EXPECTED RIGHT BRACE OF FUNCTION BLOCK "}"`,
        [ErrorType.TERMINATOR_ERR]: `ERROR - EXPECTED STATEMENT TERMINATOR ";"`,
        [ErrorType.IF_LEFT_BRACE_ERR]: `ERROR - EXPECTED LEFT BRACE OF IF/UNLESS CONDITION "("`,
        [ErrorType.IF_COND_ERR]: `CRIT ERROR - EXPECTED IF/UNLESS STATEMENT CONDITION`,
        [ErrorType.IF_RIGHT_BRACE_ERR]: `ERROR - EXPECTED RIGHT BRACE OF IF/UNLESS CONDITION ")"`,
        [ErrorType.IF_BLOCK_ERR]: `CRITICAL ERROR - EXPECTED IF/UNLESS BLOCK`,
        [ErrorType.ELSE_BLOCK_ERR]: `CRITICAL ERROR - EXPECTED ELSE BLOCK`,
        [ErrorType.WHILE_LEFT_BRACE_ERR]: `ERROR - EXPECTED LEFT BRACE OF WHILE CONDITION "("`,
        [ErrorType.WHILE_COND_ERR]: `CRIT ERROR - EXPECTED WHILE STATEMENT CONDITION`,
        [ErrorType.WHILE_RIGHT_BRACE_ERR]: `ERROR - EXPECTED RIGHT BRACE OF WHILE CONDITION ")"`,
        [ErrorType.WHILE_BLOCK_ERR]: `CRITICAL ERROR - EXPECTED WHILE BLOCK`,





    }

    static warning_mess: Record<WarningType, string> = {
        [WarningType.STRING_ESC_WARN]: "WARNING - TRIED TO ESCAPE UNESCAPABLE CHARACTER",
    }
}
